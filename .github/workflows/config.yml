# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  filter:
    name: Determine Changed Paths
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      y_redis: ${{ steps.filter.outputs.y_redis }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up paths-filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'react/**'
            backend:
              - 'express/**'
            y_redis:
              - 'y-redis/**'

  # Single deploy job since we're just deploying
  deploy-frontend:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.frontend == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: "react/package-lock.json"
      - name: Install dependencies
        working-directory: "./react"
        run: npm ci
      - name: Build
        working-directory: "./react"
        env:
          VITE_SERVER_WS_URL: ${{ secrets.VITE_SERVER_WS_URL }}
          VITE_SERVER_HTTP_URL: ${{ secrets.VITE_SERVER_HTTP_URL }}
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload dist folder
          path: "./react/dist"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    needs: filter
    environment:
      name: express-deployment
    if: needs.filter.outputs.backend == 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: "latest"

      - name: Configure Docker for Artifact Registry
        run: |
          echo ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }} > /tmp/key.json
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build Docker Image
        run: |
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/plant-express:latest ./express

      - name: Push Docker Image to Artifact Registry
        run: |
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/plant-express:latest

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}

      - name: Pull and Run Docker Container on GCP VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_SSH_USER }}@${{ secrets.GCP_VM_IP }} << 'EOF'
            # Stop existing container if running
            if [ $(docker ps -q -f name=plant-express) ]; then
              docker stop plant-express
              docker rm plant-express
            fi

            # Pull the latest image
            docker pull us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/plant-express:latest

            # Run the container
            docker run --network host -e DB_HOST=${{ secrets.DB_HOST }} -e DB_NAME=${{ secrets.DB_NAME }} -e DB_PORT=${{ secrets.DB_PORT }} -e DB_USER=${{ secrets.DB_USER }} -e DB_PASS=${{ secrets.DB_PASS }} -e PORT=${{ secrets.SERVER_PORT }} -v /host/path:/container/path -d --name plant-express -p ${{secrets.SERVER_PORT}}:${{secrets.SERVER_PORT}} us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/plant-express:latest

            # Optionally, prune unused Docker images
            docker image prune -f
          EOF

  build-deploy-y-redis:
    name: Build and Deploy y-redis
    runs-on: ubuntu-latest
    needs: filter
    environment:
      name: express-deployment
    # if: needs.filter.outputs.y_redis == 'true'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: "latest"

      - name: Configure Docker for Artifact Registry
        run: |
          echo ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }} > /tmp/key.json
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build Docker Image
        run: |
          docker build -t us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/y_redis:latest ./y-redis

      - name: Push Docker Image to Artifact Registry
        run: |
          docker push us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/y_redis:latest

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.GCP_SSH_KEY }}

      - name: Pull and Run Docker Container on GCP VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_SSH_USER }}@${{ secrets.GCP_VM_IP }} << 'EOF'
            # Stop existing container if running
            if [ $(docker ps -q -f name=y_redis) ]; then
              docker stop y_redis
              docker rm y_redis
            fi

            # Pull the latest image
            docker pull us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/y_redis:latest

            # Run the container
            docker run --network host -e POSTGRES=${{ secrets.Y_REDIS_POSTGRES_STRING }} -d -v /host/path:/container/path --name y_redis us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/y_redis:latest

            # Optionally, prune unused Docker images
            docker image prune -f
          EOF
